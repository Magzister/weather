#!/usr/bin/env python3.12
from app.arg_parser import ArgParser
from app.db import DB
from app.exceptions import (IPServiceError,
                            LocationServiceError,
                            WeatherServiceError,
                            WebParserError,
                            SSTServiceError,
                            DBError)
from app.ip_service import IPService, Ifconfig
from app.location_service import LocationService, Ipapi
from app.weather_service import WeatherService, VisualCrossing
from app.web_pserser import SSTWebParser, SeaTemperature
from app.sst_service import SSTService, SeaTemperatureSSTService
from app.formatter import format_weather
from app.types import Command


def get_weather_info(
        ip_service: IPService,
        location_service: LocationService,
        weather_service: WeatherService,
        sst_service: SSTService | None = None) -> str:
    try:
        ip = ip_service.get_ip()
        location = location_service.get_location(ip)
        weather = weather_service.get_weather(location.coordinates)
        sst = None
        if sst_service:
            href = DB().get_sst_hyperlink(location.country, location.city)
            sst = sst_service.get_sst(href)
    except IPServiceError as err:
        print("Can't get information form ip service:", err)
        exit(1)
    except LocationServiceError as err:
        print("Can't get location information from location service:", err)
        exit(1)
    except WeatherServiceError as err:
        print("Can't get weather information from weather service:", err)
        exit(1)
    except SSTServiceError as err:
        print("Can't get sea temperature:", err)
    return format_weather(location, weather, sst)


def create_sst_db(sst_web_parser: SSTWebParser) -> None:
    print("Creating database...")
    db = DB()
    print("Fetching data...")
    sst_list = sst_web_parser.parse()
    print("Populating database...")
    db.populate_sst_table(sst_list)
    print("Done!")


def main():
    args = ArgParser().get_args()
    match args.command:
        case Command.CREATE_SST_DATABASE:
            sst_web_parser = SeaTemperature()
            create_sst_db(sst_web_parser)
        case Command.SEA_TEMPERATURE:
            ip_service = Ifconfig()
            location_service = Ipapi()
            weather_service = VisualCrossing()
            sst_service = SeaTemperatureSSTService()
            print(get_weather_info(ip_service,
                                   location_service,
                                   weather_service,
                                   sst_service))
        case Command.NO_COMMAND:
            ip_service = Ifconfig()
            location_service = Ipapi()
            weather_service = VisualCrossing()
            print(get_weather_info(ip_service,
                                   location_service,
                                   weather_service))


if __name__ == "__main__":
    main()
